// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:leisure_games/ui/bean/act_status_entity.dart';
import 'package:leisure_games/ui/bean/chapter_info_entity.dart';
import 'package:leisure_games/ui/bean/customer_service_entity.dart';
import 'package:leisure_games/ui/bean/device_info.dart';
import 'package:leisure_games/ui/bean/dew_info_entity.dart';
import 'package:leisure_games/ui/bean/domain_config_entity.dart';
import 'package:leisure_games/ui/bean/game_kind_entity.dart';
import 'package:leisure_games/ui/bean/game_type_entity.dart';
import 'package:leisure_games/ui/bean/history_hall_entity.dart';
import 'package:leisure_games/ui/bean/history_lotto_entity.dart';
import 'package:leisure_games/ui/bean/home_game_menu_entity.dart';
import 'package:leisure_games/ui/bean/language_msg_entity.dart';
import 'package:leisure_games/ui/bean/message_item_entity.dart';
import 'package:leisure_games/ui/bean/news_rate_entity.dart';
import 'package:leisure_games/ui/bean/notice_entity.dart';
import 'package:leisure_games/ui/bean/pc28_lotto_entity.dart';
import 'package:leisure_games/ui/bean/pc28_plan_entity.dart';
import 'package:leisure_games/ui/bean/pic30_back_entity.dart';
import 'package:leisure_games/ui/bean/pic30_entity.dart';
import 'package:leisure_games/ui/bean/promotion_detail_entity.dart';
import 'package:leisure_games/ui/bean/promotion_type_entity.dart';
import 'package:leisure_games/ui/bean/protect_entity.dart';
import 'package:leisure_games/ui/bean/room_copy_writing_entity.dart';
import 'package:leisure_games/ui/bean/web_config_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<ActStatusEntity>[] is M) {
      return data.map<ActStatusEntity>((Map<String, dynamic> e) =>
          ActStatusEntity.fromJson(e)).toList() as M;
    }
    if (<ActStatusList>[] is M) {
      return data.map<ActStatusList>((Map<String, dynamic> e) =>
          ActStatusList.fromJson(e)).toList() as M;
    }
    if (<ChapterInfoEntity>[] is M) {
      return data.map<ChapterInfoEntity>((Map<String, dynamic> e) =>
          ChapterInfoEntity.fromJson(e)).toList() as M;
    }
    if (<CustomerServiceEntity>[] is M) {
      return data.map<CustomerServiceEntity>((Map<String, dynamic> e) =>
          CustomerServiceEntity.fromJson(e)).toList() as M;
    }
    if (<CustomerServiceCusterServers>[] is M) {
      return data.map<CustomerServiceCusterServers>((Map<String, dynamic> e) =>
          CustomerServiceCusterServers.fromJson(e)).toList() as M;
    }
    if (<DeviceInfo>[] is M) {
      return data.map<DeviceInfo>((Map<String, dynamic> e) =>
          DeviceInfo.fromJson(e)).toList() as M;
    }
    if (<DewInfoEntity>[] is M) {
      return data.map<DewInfoEntity>((Map<String, dynamic> e) =>
          DewInfoEntity.fromJson(e)).toList() as M;
    }
    if (<DomainConfigEntity>[] is M) {
      return data.map<DomainConfigEntity>((Map<String, dynamic> e) =>
          DomainConfigEntity.fromJson(e)).toList() as M;
    }
    if (<GameKindEntity>[] is M) {
      return data.map<GameKindEntity>((Map<String, dynamic> e) =>
          GameKindEntity.fromJson(e)).toList() as M;
    }
    if (<GameKindGameKindList>[] is M) {
      return data.map<GameKindGameKindList>((Map<String, dynamic> e) =>
          GameKindGameKindList.fromJson(e)).toList() as M;
    }
    if (<GameTypeEntity>[] is M) {
      return data.map<GameTypeEntity>((Map<String, dynamic> e) =>
          GameTypeEntity.fromJson(e)).toList() as M;
    }
    if (<HistoryHall>[] is M) {
      return data.map<HistoryHall>((Map<String, dynamic> e) =>
          HistoryHall.fromJson(e)).toList() as M;
    }
    if (<HistoryLottoEntity>[] is M) {
      return data.map<HistoryLottoEntity>((Map<String, dynamic> e) =>
          HistoryLottoEntity.fromJson(e)).toList() as M;
    }
    if (<HomeGameMenuEntity>[] is M) {
      return data.map<HomeGameMenuEntity>((Map<String, dynamic> e) =>
          HomeGameMenuEntity.fromJson(e)).toList() as M;
    }
    if (<LanguageMsgEntity>[] is M) {
      return data.map<LanguageMsgEntity>((Map<String, dynamic> e) =>
          LanguageMsgEntity.fromJson(e)).toList() as M;
    }
    if (<MessageItemEntity>[] is M) {
      return data.map<MessageItemEntity>((Map<String, dynamic> e) =>
          MessageItemEntity.fromJson(e)).toList() as M;
    }
    if (<NewsRateEntity>[] is M) {
      return data.map<NewsRateEntity>((Map<String, dynamic> e) =>
          NewsRateEntity.fromJson(e)).toList() as M;
    }
    if (<NoticeEntity>[] is M) {
      return data.map<NoticeEntity>((Map<String, dynamic> e) =>
          NoticeEntity.fromJson(e)).toList() as M;
    }
    if (<Pc28LottoEntity>[] is M) {
      return data.map<Pc28LottoEntity>((Map<String, dynamic> e) =>
          Pc28LottoEntity.fromJson(e)).toList() as M;
    }
    if (<Pc28LottoRooms>[] is M) {
      return data.map<Pc28LottoRooms>((Map<String, dynamic> e) =>
          Pc28LottoRooms.fromJson(e)).toList() as M;
    }
    if (<Pc28LottoRoomsTables>[] is M) {
      return data.map<Pc28LottoRoomsTables>((Map<String, dynamic> e) =>
          Pc28LottoRoomsTables.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanEntity>[] is M) {
      return data.map<Pc28PlanEntity>((Map<String, dynamic> e) =>
          Pc28PlanEntity.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanAll>[] is M) {
      return data.map<Pc28PlanAll>((Map<String, dynamic> e) =>
          Pc28PlanAll.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanAllJndx28>[] is M) {
      return data.map<Pc28PlanAllJndx28>((Map<String, dynamic> e) =>
          Pc28PlanAllJndx28.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanAllJndx28Data>[] is M) {
      return data.map<Pc28PlanAllJndx28Data>((Map<String, dynamic> e) =>
          Pc28PlanAllJndx28Data.fromJson(e)).toList() as M;
    }
    if (<Pic30BackEntity>[] is M) {
      return data.map<Pic30BackEntity>((Map<String, dynamic> e) =>
          Pic30BackEntity.fromJson(e)).toList() as M;
    }
    if (<Pic30BackBack>[] is M) {
      return data.map<Pic30BackBack>((Map<String, dynamic> e) =>
          Pic30BackBack.fromJson(e)).toList() as M;
    }
    if (<Pic30Entity>[] is M) {
      return data.map<Pic30Entity>((Map<String, dynamic> e) =>
          Pic30Entity.fromJson(e)).toList() as M;
    }
    if (<PromotionDetailEntity>[] is M) {
      return data.map<PromotionDetailEntity>((Map<String, dynamic> e) =>
          PromotionDetailEntity.fromJson(e)).toList() as M;
    }
    if (<PromotionTypeEntity>[] is M) {
      return data.map<PromotionTypeEntity>((Map<String, dynamic> e) =>
          PromotionTypeEntity.fromJson(e)).toList() as M;
    }
    if (<PromotionTypeKey>[] is M) {
      return data.map<PromotionTypeKey>((Map<String, dynamic> e) =>
          PromotionTypeKey.fromJson(e)).toList() as M;
    }
    if (<ProtectEntity>[] is M) {
      return data.map<ProtectEntity>((Map<String, dynamic> e) =>
          ProtectEntity.fromJson(e)).toList() as M;
    }
    if (<ProtectProtect>[] is M) {
      return data.map<ProtectProtect>((Map<String, dynamic> e) =>
          ProtectProtect.fromJson(e)).toList() as M;
    }
    if (<ProtectProtectKkwdsLive>[] is M) {
      return data.map<ProtectProtectKkwdsLive>((Map<String, dynamic> e) =>
          ProtectProtectKkwdsLive.fromJson(e)).toList() as M;
    }
    if (<ProtectProtectBbSport>[] is M) {
      return data.map<ProtectProtectBbSport>((Map<String, dynamic> e) =>
          ProtectProtectBbSport.fromJson(e)).toList() as M;
    }
    if (<RoomCopyWritingEntity>[] is M) {
      return data.map<RoomCopyWritingEntity>((Map<String, dynamic> e) =>
          RoomCopyWritingEntity.fromJson(e)).toList() as M;
    }
    if (<RoomCopyWritingContent>[] is M) {
      return data.map<RoomCopyWritingContent>((Map<String, dynamic> e) =>
          RoomCopyWritingContent.fromJson(e)).toList() as M;
    }
    if (<WebConfigEntity>[] is M) {
      return data.map<WebConfigEntity>((Map<String, dynamic> e) =>
          WebConfigEntity.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainPc28>[] is M) {
      return data.map<WebConfigDomainPc28>((Map<String, dynamic> e) =>
          WebConfigDomainPc28.fromJson(e)).toList() as M;
    }
    if (<WebConfigDcHelpDomain>[] is M) {
      return data.map<WebConfigDcHelpDomain>((Map<String, dynamic> e) =>
          WebConfigDcHelpDomain.fromJson(e)).toList() as M;
    }
    if (<WebConfigPtgamehost>[] is M) {
      return data.map<WebConfigPtgamehost>((Map<String, dynamic> e) =>
          WebConfigPtgamehost.fromJson(e)).toList() as M;
    }
    if (<WebConfigAppDownload>[] is M) {
      return data.map<WebConfigAppDownload>((Map<String, dynamic> e) =>
          WebConfigAppDownload.fromJson(e)).toList() as M;
    }
    if (<WebConfigAppDownloadIos1>[] is M) {
      return data.map<WebConfigAppDownloadIos1>((Map<String, dynamic> e) =>
          WebConfigAppDownloadIos1.fromJson(e)).toList() as M;
    }
    if (<WebConfigAppDownloadIos1Config>[] is M) {
      return data.map<WebConfigAppDownloadIos1Config>((
          Map<String, dynamic> e) => WebConfigAppDownloadIos1Config.fromJson(e))
          .toList() as M;
    }
    if (<WebConfigLottoLineUrl>[] is M) {
      return data.map<WebConfigLottoLineUrl>((Map<String, dynamic> e) =>
          WebConfigLottoLineUrl.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainJingdiancai>[] is M) {
      return data.map<WebConfigDomainJingdiancai>((Map<String, dynamic> e) =>
          WebConfigDomainJingdiancai.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainGuanfangcai>[] is M) {
      return data.map<WebConfigDomainGuanfangcai>((Map<String, dynamic> e) =>
          WebConfigDomainGuanfangcai.fromJson(e)).toList() as M;
    }
    if (<WebConfigAgDomain>[] is M) {
      return data.map<WebConfigAgDomain>((Map<String, dynamic> e) =>
          WebConfigAgDomain.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainMGuanfangcai>[] is M) {
      return data.map<WebConfigDomainMGuanfangcai>((Map<String, dynamic> e) =>
          WebConfigDomainMGuanfangcai.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainMPc28>[] is M) {
      return data.map<WebConfigDomainMPc28>((Map<String, dynamic> e) =>
          WebConfigDomainMPc28.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainMJingdiancai>[] is M) {
      return data.map<WebConfigDomainMJingdiancai>((Map<String, dynamic> e) =>
          WebConfigDomainMJingdiancai.fromJson(e)).toList() as M;
    }
    if (<WebConfigRegisterOption>[] is M) {
      return data.map<WebConfigRegisterOption>((Map<String, dynamic> e) =>
          WebConfigRegisterOption.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (ActStatusEntity).toString(): ActStatusEntity.fromJson,
    (ActStatusList).toString(): ActStatusList.fromJson,
    (ChapterInfoEntity).toString(): ChapterInfoEntity.fromJson,
    (CustomerServiceEntity).toString(): CustomerServiceEntity.fromJson,
    (CustomerServiceCusterServers).toString(): CustomerServiceCusterServers
        .fromJson,
    (DeviceInfo).toString(): DeviceInfo.fromJson,
    (DewInfoEntity).toString(): DewInfoEntity.fromJson,
    (DomainConfigEntity).toString(): DomainConfigEntity.fromJson,
    (GameKindEntity).toString(): GameKindEntity.fromJson,
    (GameKindGameKindList).toString(): GameKindGameKindList.fromJson,
    (GameTypeEntity).toString(): GameTypeEntity.fromJson,
    (HistoryHall).toString(): HistoryHall.fromJson,
    (HistoryLottoEntity).toString(): HistoryLottoEntity.fromJson,
    (HomeGameMenuEntity).toString(): HomeGameMenuEntity.fromJson,
    (LanguageMsgEntity).toString(): LanguageMsgEntity.fromJson,
    (MessageItemEntity).toString(): MessageItemEntity.fromJson,
    (NewsRateEntity).toString(): NewsRateEntity.fromJson,
    (NoticeEntity).toString(): NoticeEntity.fromJson,
    (Pc28LottoEntity).toString(): Pc28LottoEntity.fromJson,
    (Pc28LottoRooms).toString(): Pc28LottoRooms.fromJson,
    (Pc28LottoRoomsTables).toString(): Pc28LottoRoomsTables.fromJson,
    (Pc28PlanEntity).toString(): Pc28PlanEntity.fromJson,
    (Pc28PlanAll).toString(): Pc28PlanAll.fromJson,
    (Pc28PlanAllJndx28).toString(): Pc28PlanAllJndx28.fromJson,
    (Pc28PlanAllJndx28Data).toString(): Pc28PlanAllJndx28Data.fromJson,
    (Pic30BackEntity).toString(): Pic30BackEntity.fromJson,
    (Pic30BackBack).toString(): Pic30BackBack.fromJson,
    (Pic30Entity).toString(): Pic30Entity.fromJson,
    (PromotionDetailEntity).toString(): PromotionDetailEntity.fromJson,
    (PromotionTypeEntity).toString(): PromotionTypeEntity.fromJson,
    (PromotionTypeKey).toString(): PromotionTypeKey.fromJson,
    (ProtectEntity).toString(): ProtectEntity.fromJson,
    (ProtectProtect).toString(): ProtectProtect.fromJson,
    (ProtectProtectKkwdsLive).toString(): ProtectProtectKkwdsLive.fromJson,
    (ProtectProtectBbSport).toString(): ProtectProtectBbSport.fromJson,
    (RoomCopyWritingEntity).toString(): RoomCopyWritingEntity.fromJson,
    (RoomCopyWritingContent).toString(): RoomCopyWritingContent.fromJson,
    (WebConfigEntity).toString(): WebConfigEntity.fromJson,
    (WebConfigDomainPc28).toString(): WebConfigDomainPc28.fromJson,
    (WebConfigDcHelpDomain).toString(): WebConfigDcHelpDomain.fromJson,
    (WebConfigPtgamehost).toString(): WebConfigPtgamehost.fromJson,
    (WebConfigAppDownload).toString(): WebConfigAppDownload.fromJson,
    (WebConfigAppDownloadIos1).toString(): WebConfigAppDownloadIos1.fromJson,
    (WebConfigAppDownloadIos1Config).toString(): WebConfigAppDownloadIos1Config
        .fromJson,
    (WebConfigLottoLineUrl).toString(): WebConfigLottoLineUrl.fromJson,
    (WebConfigDomainJingdiancai).toString(): WebConfigDomainJingdiancai
        .fromJson,
    (WebConfigDomainGuanfangcai).toString(): WebConfigDomainGuanfangcai
        .fromJson,
    (WebConfigAgDomain).toString(): WebConfigAgDomain.fromJson,
    (WebConfigDomainMGuanfangcai).toString(): WebConfigDomainMGuanfangcai
        .fromJson,
    (WebConfigDomainMPc28).toString(): WebConfigDomainMPc28.fromJson,
    (WebConfigDomainMJingdiancai).toString(): WebConfigDomainMJingdiancai
        .fromJson,
    (WebConfigRegisterOption).toString(): WebConfigRegisterOption.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}