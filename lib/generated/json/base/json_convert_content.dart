// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:leisure_games/app/socket/isolate_msg_entity.dart';
import 'package:leisure_games/app/socket/ws_bet_entity.dart';
import 'package:leisure_games/app/socket/ws_login_entity.dart';
import 'package:leisure_games/app/socket/ws_logout_entity.dart';
import 'package:leisure_games/app/socket/ws_lottery_entity.dart';
import 'package:leisure_games/app/socket/ws_message_get_entity.dart';
import 'package:leisure_games/app/socket/ws_message_send_entity.dart';
import 'package:leisure_games/app/socket/ws_msg_error_entity.dart';
import 'package:leisure_games/app/socket/ws_to_bet_entity.dart';
import 'package:leisure_games/ui/bean/act_status_entity.dart';
import 'package:leisure_games/ui/bean/back_water_desc_entity.dart';
import 'package:leisure_games/ui/bean/back_water_entity.dart';
import 'package:leisure_games/ui/bean/balance_entity.dart';
import 'package:leisure_games/ui/bean/bank_entity.dart';
import 'package:leisure_games/ui/bean/base_api_oss_entity.dart';
import 'package:leisure_games/ui/bean/bet_detail_item_child_entity.dart';
import 'package:leisure_games/ui/bean/bet_detail_item_entity.dart';
import 'package:leisure_games/ui/bean/bet_record_group_entity.dart';
import 'package:leisure_games/ui/bean/bet_shake_entity.dart';
import 'package:leisure_games/ui/bean/bonus_total_entity.dart';
import 'package:leisure_games/ui/bean/btc_source_entity.dart';
import 'package:leisure_games/ui/bean/chapter_info_entity.dart';
import 'package:leisure_games/ui/bean/check_in_info_entity.dart';
import 'package:leisure_games/ui/bean/check_point_entity.dart';
import 'package:leisure_games/ui/bean/chess_info_entity.dart';
import 'package:leisure_games/ui/bean/constitute_ratio_entity.dart';
import 'package:leisure_games/ui/bean/current_bet_entity.dart';
import 'package:leisure_games/ui/bean/customer_service_entity.dart';
import 'package:leisure_games/ui/bean/day_return_water_details_entity.dart';
import 'package:leisure_games/ui/bean/deposit_log_entity.dart';
import 'package:leisure_games/ui/bean/device_info.dart';
import 'package:leisure_games/ui/bean/dew_info_entity.dart';
import 'package:leisure_games/ui/bean/digiccy_channel_entity.dart';
import 'package:leisure_games/ui/bean/digiccy_deposit_data_entity.dart';
import 'package:leisure_games/ui/bean/domain_config_entity.dart';
import 'package:leisure_games/ui/bean/draw_lottery_entity.dart';
import 'package:leisure_games/ui/bean/ds_game_entity.dart';
import 'package:leisure_games/ui/bean/ele_game_type_entity.dart';
import 'package:leisure_games/ui/bean/expression_entity.dart';
import 'package:leisure_games/ui/bean/flow_data_entity.dart';
import 'package:leisure_games/ui/bean/game_kind_entity.dart';
import 'package:leisure_games/ui/bean/game_type_entity.dart';
import 'package:leisure_games/ui/bean/help_entity.dart';
import 'package:leisure_games/ui/bean/history_hall_entity.dart';
import 'package:leisure_games/ui/bean/history_lotto_entity.dart';
import 'package:leisure_games/ui/bean/home_game_menu_entity.dart';
import 'package:leisure_games/ui/bean/is_permit_entity.dart';
import 'package:leisure_games/ui/bean/jump_payment_entity.dart';
import 'package:leisure_games/ui/bean/language_msg_entity.dart';
import 'package:leisure_games/ui/bean/login_game_agent_entity.dart';
import 'package:leisure_games/ui/bean/login_user_entity.dart';
import 'package:leisure_games/ui/bean/member_point_entity.dart';
import 'package:leisure_games/ui/bean/message_item_entity.dart';
import 'package:leisure_games/ui/bean/news_rate_entity.dart';
import 'package:leisure_games/ui/bean/notice_entity.dart';
import 'package:leisure_games/ui/bean/payment_channel_entity.dart';
import 'package:leisure_games/ui/bean/payment_list_entity.dart';
import 'package:leisure_games/ui/bean/pc28_lotto_entity.dart';
import 'package:leisure_games/ui/bean/pc28_odds_entity.dart';
import 'package:leisure_games/ui/bean/pc28_plan_entity.dart';
import 'package:leisure_games/ui/bean/phrase_entity.dart';
import 'package:leisure_games/ui/bean/pic28_count_time_text.dart';
import 'package:leisure_games/ui/bean/pic30_back_entity.dart';
import 'package:leisure_games/ui/bean/pic30_entity.dart';
import 'package:leisure_games/ui/bean/platform_entity.dart';
import 'package:leisure_games/ui/bean/point_record_entity.dart';
import 'package:leisure_games/ui/bean/prize_list_entity.dart';
import 'package:leisure_games/ui/bean/promotion_detail_entity.dart';
import 'package:leisure_games/ui/bean/promotion_type_entity.dart';
import 'package:leisure_games/ui/bean/protect_entity.dart';
import 'package:leisure_games/ui/bean/room_copy_writing_entity.dart';
import 'package:leisure_games/ui/bean/shake_info_entity.dart';
import 'package:leisure_games/ui/bean/site_wallet_config_entity.dart';
import 'package:leisure_games/ui/bean/socket_base_entity.dart';
import 'package:leisure_games/ui/bean/spread_promos_data_entity.dart';
import 'package:leisure_games/ui/bean/spread_user_entity.dart';
import 'package:leisure_games/ui/bean/usdt_channel_entity.dart';
import 'package:leisure_games/ui/bean/usdt_entity.dart';
import 'package:leisure_games/ui/bean/user_detail_entity.dart';
import 'package:leisure_games/ui/bean/user_draw_detail_entity.dart';
import 'package:leisure_games/ui/bean/var_code_entity.dart';
import 'package:leisure_games/ui/bean/wallet_draw_detail_entity.dart';
import 'package:leisure_games/ui/bean/web_config_entity.dart';
import 'package:leisure_games/ui/bean/withdraw_check_entity.dart';
import 'package:leisure_games/ui/main/home/game_room/bean/count_down_lottery_entity.dart';
import 'package:leisure_games/ui/main/home/game_room/bean/game_room_item_entity.dart';
import 'package:leisure_games/ui/main/home/game_room/bean/odds_content.dart';
import 'package:leisure_games/ui/main/home/game_room/bean/ws_msg_get_pic_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<IsolateMsgEntity>[] is M) {
      return data.map<IsolateMsgEntity>((Map<String, dynamic> e) =>
          IsolateMsgEntity.fromJson(e)).toList() as M;
    }
    if (<WsBetEntity>[] is M) {
      return data.map<WsBetEntity>((Map<String, dynamic> e) =>
          WsBetEntity.fromJson(e)).toList() as M;
    }
    if (<WsBetContent>[] is M) {
      return data.map<WsBetContent>((Map<String, dynamic> e) =>
          WsBetContent.fromJson(e)).toList() as M;
    }
    if (<WsLoginEntity>[] is M) {
      return data.map<WsLoginEntity>((Map<String, dynamic> e) =>
          WsLoginEntity.fromJson(e)).toList() as M;
    }
    if (<WsLogoutEntity>[] is M) {
      return data.map<WsLogoutEntity>((Map<String, dynamic> e) =>
          WsLogoutEntity.fromJson(e)).toList() as M;
    }
    if (<WSLotteryEntity>[] is M) {
      return data.map<WSLotteryEntity>((Map<String, dynamic> e) =>
          WSLotteryEntity.fromJson(e)).toList() as M;
    }
    if (<WSLotteryEntityData>[] is M) {
      return data.map<WSLotteryEntityData>((Map<String, dynamic> e) =>
          WSLotteryEntityData.fromJson(e)).toList() as M;
    }
    if (<WsMessageGetEntity>[] is M) {
      return data.map<WsMessageGetEntity>((Map<String, dynamic> e) =>
          WsMessageGetEntity.fromJson(e)).toList() as M;
    }
    if (<WsMessageSendEntity>[] is M) {
      return data.map<WsMessageSendEntity>((Map<String, dynamic> e) =>
          WsMessageSendEntity.fromJson(e)).toList() as M;
    }
    if (<WsMsgErrorEntity>[] is M) {
      return data.map<WsMsgErrorEntity>((Map<String, dynamic> e) =>
          WsMsgErrorEntity.fromJson(e)).toList() as M;
    }
    if (<WsToBetEntity>[] is M) {
      return data.map<WsToBetEntity>((Map<String, dynamic> e) =>
          WsToBetEntity.fromJson(e)).toList() as M;
    }
    if (<WsToBetContent>[] is M) {
      return data.map<WsToBetContent>((Map<String, dynamic> e) =>
          WsToBetContent.fromJson(e)).toList() as M;
    }
    if (<ActStatusEntity>[] is M) {
      return data.map<ActStatusEntity>((Map<String, dynamic> e) =>
          ActStatusEntity.fromJson(e)).toList() as M;
    }
    if (<ActStatusList>[] is M) {
      return data.map<ActStatusList>((Map<String, dynamic> e) =>
          ActStatusList.fromJson(e)).toList() as M;
    }
    if (<BackWaterDescEntity>[] is M) {
      return data.map<BackWaterDescEntity>((Map<String, dynamic> e) =>
          BackWaterDescEntity.fromJson(e)).toList() as M;
    }
    if (<BackWaterEntity>[] is M) {
      return data.map<BackWaterEntity>((Map<String, dynamic> e) =>
          BackWaterEntity.fromJson(e)).toList() as M;
    }
    if (<BalanceEntity>[] is M) {
      return data.map<BalanceEntity>((Map<String, dynamic> e) =>
          BalanceEntity.fromJson(e)).toList() as M;
    }
    if (<BankEntity>[] is M) {
      return data.map<BankEntity>((Map<String, dynamic> e) =>
          BankEntity.fromJson(e)).toList() as M;
    }
    if (<BaseApiOssEntity>[] is M) {
      return data.map<BaseApiOssEntity>((Map<String, dynamic> e) =>
          BaseApiOssEntity.fromJson(e)).toList() as M;
    }
    if (<BetDetailItemChildEntity>[] is M) {
      return data.map<BetDetailItemChildEntity>((Map<String, dynamic> e) =>
          BetDetailItemChildEntity.fromJson(e)).toList() as M;
    }
    if (<Record>[] is M) {
      return data.map<Record>((Map<String, dynamic> e) => Record.fromJson(e))
          .toList() as M;
    }
    if (<Total>[] is M) {
      return data.map<Total>((Map<String, dynamic> e) => Total.fromJson(e))
          .toList() as M;
    }
    if (<BetDetailItemEntity>[] is M) {
      return data.map<BetDetailItemEntity>((Map<String, dynamic> e) =>
          BetDetailItemEntity.fromJson(e)).toList() as M;
    }
    if (<BetRecordGroupEntity>[] is M) {
      return data.map<BetRecordGroupEntity>((Map<String, dynamic> e) =>
          BetRecordGroupEntity.fromJson(e)).toList() as M;
    }
    if (<BetRecordGroupRecord>[] is M) {
      return data.map<BetRecordGroupRecord>((Map<String, dynamic> e) =>
          BetRecordGroupRecord.fromJson(e)).toList() as M;
    }
    if (<BetShakeEntity>[] is M) {
      return data.map<BetShakeEntity>((Map<String, dynamic> e) =>
          BetShakeEntity.fromJson(e)).toList() as M;
    }
    if (<BonusTotalEntity>[] is M) {
      return data.map<BonusTotalEntity>((Map<String, dynamic> e) =>
          BonusTotalEntity.fromJson(e)).toList() as M;
    }
    if (<BtcSourceEntity>[] is M) {
      return data.map<BtcSourceEntity>((Map<String, dynamic> e) =>
          BtcSourceEntity.fromJson(e)).toList() as M;
    }
    if (<ChapterInfoEntity>[] is M) {
      return data.map<ChapterInfoEntity>((Map<String, dynamic> e) =>
          ChapterInfoEntity.fromJson(e)).toList() as M;
    }
    if (<CheckInInfoEntity>[] is M) {
      return data.map<CheckInInfoEntity>((Map<String, dynamic> e) =>
          CheckInInfoEntity.fromJson(e)).toList() as M;
    }
    if (<CheckPointEntity>[] is M) {
      return data.map<CheckPointEntity>((Map<String, dynamic> e) =>
          CheckPointEntity.fromJson(e)).toList() as M;
    }
    if (<ChessInfoEntity>[] is M) {
      return data.map<ChessInfoEntity>((Map<String, dynamic> e) =>
          ChessInfoEntity.fromJson(e)).toList() as M;
    }
    if (<ConstituteRatioEntity>[] is M) {
      return data.map<ConstituteRatioEntity>((Map<String, dynamic> e) =>
          ConstituteRatioEntity.fromJson(e)).toList() as M;
    }
    if (<CurrentBetEntity>[] is M) {
      return data.map<CurrentBetEntity>((Map<String, dynamic> e) =>
          CurrentBetEntity.fromJson(e)).toList() as M;
    }
    if (<CurrentBetContent>[] is M) {
      return data.map<CurrentBetContent>((Map<String, dynamic> e) =>
          CurrentBetContent.fromJson(e)).toList() as M;
    }
    if (<CustomerServiceEntity>[] is M) {
      return data.map<CustomerServiceEntity>((Map<String, dynamic> e) =>
          CustomerServiceEntity.fromJson(e)).toList() as M;
    }
    if (<CustomerServiceCusterServers>[] is M) {
      return data.map<CustomerServiceCusterServers>((Map<String, dynamic> e) =>
          CustomerServiceCusterServers.fromJson(e)).toList() as M;
    }
    if (<DayReturnWaterDetailsEntity>[] is M) {
      return data.map<DayReturnWaterDetailsEntity>((Map<String, dynamic> e) =>
          DayReturnWaterDetailsEntity.fromJson(e)).toList() as M;
    }
    if (<DayReturnWaterDetailsRecord>[] is M) {
      return data.map<DayReturnWaterDetailsRecord>((Map<String, dynamic> e) =>
          DayReturnWaterDetailsRecord.fromJson(e)).toList() as M;
    }
    if (<DepositLogEntity>[] is M) {
      return data.map<DepositLogEntity>((Map<String, dynamic> e) =>
          DepositLogEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceInfo>[] is M) {
      return data.map<DeviceInfo>((Map<String, dynamic> e) =>
          DeviceInfo.fromJson(e)).toList() as M;
    }
    if (<DewInfoEntity>[] is M) {
      return data.map<DewInfoEntity>((Map<String, dynamic> e) =>
          DewInfoEntity.fromJson(e)).toList() as M;
    }
    if (<DigiccyChannelEntity>[] is M) {
      return data.map<DigiccyChannelEntity>((Map<String, dynamic> e) =>
          DigiccyChannelEntity.fromJson(e)).toList() as M;
    }
    if (<DigiccyChannelWallet>[] is M) {
      return data.map<DigiccyChannelWallet>((Map<String, dynamic> e) =>
          DigiccyChannelWallet.fromJson(e)).toList() as M;
    }
    if (<DigiccyDepositDataEntity>[] is M) {
      return data.map<DigiccyDepositDataEntity>((Map<String, dynamic> e) =>
          DigiccyDepositDataEntity.fromJson(e)).toList() as M;
    }
    if (<DomainConfigEntity>[] is M) {
      return data.map<DomainConfigEntity>((Map<String, dynamic> e) =>
          DomainConfigEntity.fromJson(e)).toList() as M;
    }
    if (<DrawLotteryEntity>[] is M) {
      return data.map<DrawLotteryEntity>((Map<String, dynamic> e) =>
          DrawLotteryEntity.fromJson(e)).toList() as M;
    }
    if (<DsGameEntity>[] is M) {
      return data.map<DsGameEntity>((Map<String, dynamic> e) =>
          DsGameEntity.fromJson(e)).toList() as M;
    }
    if (<DsGameGamesZm>[] is M) {
      return data.map<DsGameGamesZm>((Map<String, dynamic> e) =>
          DsGameGamesZm.fromJson(e)).toList() as M;
    }
    if (<EleGameTypeEntity>[] is M) {
      return data.map<EleGameTypeEntity>((Map<String, dynamic> e) =>
          EleGameTypeEntity.fromJson(e)).toList() as M;
    }
    if (<ExpressionEntity>[] is M) {
      return data.map<ExpressionEntity>((Map<String, dynamic> e) =>
          ExpressionEntity.fromJson(e)).toList() as M;
    }
    if (<FlowDataEntity>[] is M) {
      return data.map<FlowDataEntity>((Map<String, dynamic> e) =>
          FlowDataEntity.fromJson(e)).toList() as M;
    }
    if (<FlowDataList>[] is M) {
      return data.map<FlowDataList>((Map<String, dynamic> e) =>
          FlowDataList.fromJson(e)).toList() as M;
    }
    if (<FlowDataPagation>[] is M) {
      return data.map<FlowDataPagation>((Map<String, dynamic> e) =>
          FlowDataPagation.fromJson(e)).toList() as M;
    }
    if (<GameKindEntity>[] is M) {
      return data.map<GameKindEntity>((Map<String, dynamic> e) =>
          GameKindEntity.fromJson(e)).toList() as M;
    }
    if (<GameKindGameKindList>[] is M) {
      return data.map<GameKindGameKindList>((Map<String, dynamic> e) =>
          GameKindGameKindList.fromJson(e)).toList() as M;
    }
    if (<GameTypeEntity>[] is M) {
      return data.map<GameTypeEntity>((Map<String, dynamic> e) =>
          GameTypeEntity.fromJson(e)).toList() as M;
    }
    if (<HelpEntity>[] is M) {
      return data.map<HelpEntity>((Map<String, dynamic> e) =>
          HelpEntity.fromJson(e)).toList() as M;
    }
    if (<HistoryHall>[] is M) {
      return data.map<HistoryHall>((Map<String, dynamic> e) =>
          HistoryHall.fromJson(e)).toList() as M;
    }
    if (<HistoryLottoEntity>[] is M) {
      return data.map<HistoryLottoEntity>((Map<String, dynamic> e) =>
          HistoryLottoEntity.fromJson(e)).toList() as M;
    }
    if (<HomeGameMenuEntity>[] is M) {
      return data.map<HomeGameMenuEntity>((Map<String, dynamic> e) =>
          HomeGameMenuEntity.fromJson(e)).toList() as M;
    }
    if (<IsPermitEntity>[] is M) {
      return data.map<IsPermitEntity>((Map<String, dynamic> e) =>
          IsPermitEntity.fromJson(e)).toList() as M;
    }
    if (<JumpPaymentEntity>[] is M) {
      return data.map<JumpPaymentEntity>((Map<String, dynamic> e) =>
          JumpPaymentEntity.fromJson(e)).toList() as M;
    }
    if (<JumpPaymentBanks>[] is M) {
      return data.map<JumpPaymentBanks>((Map<String, dynamic> e) =>
          JumpPaymentBanks.fromJson(e)).toList() as M;
    }
    if (<LanguageMsgEntity>[] is M) {
      return data.map<LanguageMsgEntity>((Map<String, dynamic> e) =>
          LanguageMsgEntity.fromJson(e)).toList() as M;
    }
    if (<LoginGameAgentEntity>[] is M) {
      return data.map<LoginGameAgentEntity>((Map<String, dynamic> e) =>
          LoginGameAgentEntity.fromJson(e)).toList() as M;
    }
    if (<LoginGameAgentParams>[] is M) {
      return data.map<LoginGameAgentParams>((Map<String, dynamic> e) =>
          LoginGameAgentParams.fromJson(e)).toList() as M;
    }
    if (<LoginUserEntity>[] is M) {
      return data.map<LoginUserEntity>((Map<String, dynamic> e) =>
          LoginUserEntity.fromJson(e)).toList() as M;
    }
    if (<MemberPointEntity>[] is M) {
      return data.map<MemberPointEntity>((Map<String, dynamic> e) =>
          MemberPointEntity.fromJson(e)).toList() as M;
    }
    if (<MessageItemEntity>[] is M) {
      return data.map<MessageItemEntity>((Map<String, dynamic> e) =>
          MessageItemEntity.fromJson(e)).toList() as M;
    }
    if (<NewsRateEntity>[] is M) {
      return data.map<NewsRateEntity>((Map<String, dynamic> e) =>
          NewsRateEntity.fromJson(e)).toList() as M;
    }
    if (<NoticeEntity>[] is M) {
      return data.map<NoticeEntity>((Map<String, dynamic> e) =>
          NoticeEntity.fromJson(e)).toList() as M;
    }
    if (<PaymentChannelEntity>[] is M) {
      return data.map<PaymentChannelEntity>((Map<String, dynamic> e) =>
          PaymentChannelEntity.fromJson(e)).toList() as M;
    }
    if (<PaymentChannelBankSet>[] is M) {
      return data.map<PaymentChannelBankSet>((Map<String, dynamic> e) =>
          PaymentChannelBankSet.fromJson(e)).toList() as M;
    }
    if (<PaymentListEntity>[] is M) {
      return data.map<PaymentListEntity>((Map<String, dynamic> e) =>
          PaymentListEntity.fromJson(e)).toList() as M;
    }
    if (<PaymentListBanks>[] is M) {
      return data.map<PaymentListBanks>((Map<String, dynamic> e) =>
          PaymentListBanks.fromJson(e)).toList() as M;
    }
    if (<Pc28LottoEntity>[] is M) {
      return data.map<Pc28LottoEntity>((Map<String, dynamic> e) =>
          Pc28LottoEntity.fromJson(e)).toList() as M;
    }
    if (<Pc28LottoRooms>[] is M) {
      return data.map<Pc28LottoRooms>((Map<String, dynamic> e) =>
          Pc28LottoRooms.fromJson(e)).toList() as M;
    }
    if (<Pc28LottoRoomsTables>[] is M) {
      return data.map<Pc28LottoRoomsTables>((Map<String, dynamic> e) =>
          Pc28LottoRoomsTables.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds11>[] is M) {
      return data.map<Pc28Odds11>((Map<String, dynamic> e) =>
          Pc28Odds11.fromJson(e)).toList() as M;
    }
    if (<Pc28OddsOdd>[] is M) {
      return data.map<Pc28OddsOdd>((Map<String, dynamic> e) =>
          Pc28OddsOdd.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds12>[] is M) {
      return data.map<Pc28Odds12>((Map<String, dynamic> e) =>
          Pc28Odds12.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds13>[] is M) {
      return data.map<Pc28Odds13>((Map<String, dynamic> e) =>
          Pc28Odds13.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds14>[] is M) {
      return data.map<Pc28Odds14>((Map<String, dynamic> e) =>
          Pc28Odds14.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds15>[] is M) {
      return data.map<Pc28Odds15>((Map<String, dynamic> e) =>
          Pc28Odds15.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds2>[] is M) {
      return data.map<Pc28Odds2>((Map<String, dynamic> e) =>
          Pc28Odds2.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds4>[] is M) {
      return data.map<Pc28Odds4>((Map<String, dynamic> e) =>
          Pc28Odds4.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds5>[] is M) {
      return data.map<Pc28Odds5>((Map<String, dynamic> e) =>
          Pc28Odds5.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds6>[] is M) {
      return data.map<Pc28Odds6>((Map<String, dynamic> e) =>
          Pc28Odds6.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds7>[] is M) {
      return data.map<Pc28Odds7>((Map<String, dynamic> e) =>
          Pc28Odds7.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds8>[] is M) {
      return data.map<Pc28Odds8>((Map<String, dynamic> e) =>
          Pc28Odds8.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds9>[] is M) {
      return data.map<Pc28Odds9>((Map<String, dynamic> e) =>
          Pc28Odds9.fromJson(e)).toList() as M;
    }
    if (<Pc28Odds10>[] is M) {
      return data.map<Pc28Odds10>((Map<String, dynamic> e) =>
          Pc28Odds10.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanEntity>[] is M) {
      return data.map<Pc28PlanEntity>((Map<String, dynamic> e) =>
          Pc28PlanEntity.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanAll>[] is M) {
      return data.map<Pc28PlanAll>((Map<String, dynamic> e) =>
          Pc28PlanAll.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanAllJndx28>[] is M) {
      return data.map<Pc28PlanAllJndx28>((Map<String, dynamic> e) =>
          Pc28PlanAllJndx28.fromJson(e)).toList() as M;
    }
    if (<Pc28PlanAllJndx28Data>[] is M) {
      return data.map<Pc28PlanAllJndx28Data>((Map<String, dynamic> e) =>
          Pc28PlanAllJndx28Data.fromJson(e)).toList() as M;
    }
    if (<PhraseEntity>[] is M) {
      return data.map<PhraseEntity>((Map<String, dynamic> e) =>
          PhraseEntity.fromJson(e)).toList() as M;
    }
    if (<TimeDataContent>[] is M) {
      return data.map<TimeDataContent>((Map<String, dynamic> e) =>
          TimeDataContent.fromJson(e)).toList() as M;
    }
    if (<TimeDataItem>[] is M) {
      return data.map<TimeDataItem>((Map<String, dynamic> e) =>
          TimeDataItem.fromJson(e)).toList() as M;
    }
    if (<TimeDataItemData>[] is M) {
      return data.map<TimeDataItemData>((Map<String, dynamic> e) =>
          TimeDataItemData.fromJson(e)).toList() as M;
    }
    if (<Pic30BackEntity>[] is M) {
      return data.map<Pic30BackEntity>((Map<String, dynamic> e) =>
          Pic30BackEntity.fromJson(e)).toList() as M;
    }
    if (<Pic30BackBack>[] is M) {
      return data.map<Pic30BackBack>((Map<String, dynamic> e) =>
          Pic30BackBack.fromJson(e)).toList() as M;
    }
    if (<Pic30Entity>[] is M) {
      return data.map<Pic30Entity>((Map<String, dynamic> e) =>
          Pic30Entity.fromJson(e)).toList() as M;
    }
    if (<PlatformEntity>[] is M) {
      return data.map<PlatformEntity>((Map<String, dynamic> e) =>
          PlatformEntity.fromJson(e)).toList() as M;
    }
    if (<PointRecordEntity>[] is M) {
      return data.map<PointRecordEntity>((Map<String, dynamic> e) =>
          PointRecordEntity.fromJson(e)).toList() as M;
    }
    if (<PointRecordRecord>[] is M) {
      return data.map<PointRecordRecord>((Map<String, dynamic> e) =>
          PointRecordRecord.fromJson(e)).toList() as M;
    }
    if (<PrizeListEntity>[] is M) {
      return data.map<PrizeListEntity>((Map<String, dynamic> e) =>
          PrizeListEntity.fromJson(e)).toList() as M;
    }
    if (<PrizeListPrizes>[] is M) {
      return data.map<PrizeListPrizes>((Map<String, dynamic> e) =>
          PrizeListPrizes.fromJson(e)).toList() as M;
    }
    if (<PromotionDetailEntity>[] is M) {
      return data.map<PromotionDetailEntity>((Map<String, dynamic> e) =>
          PromotionDetailEntity.fromJson(e)).toList() as M;
    }
    if (<PromotionTypeKey>[] is M) {
      return data.map<PromotionTypeKey>((Map<String, dynamic> e) =>
          PromotionTypeKey.fromJson(e)).toList() as M;
    }
    if (<ProtectEntity>[] is M) {
      return data.map<ProtectEntity>((Map<String, dynamic> e) =>
          ProtectEntity.fromJson(e)).toList() as M;
    }
    if (<ProtectProtectKkwdsLive>[] is M) {
      return data.map<ProtectProtectKkwdsLive>((Map<String, dynamic> e) =>
          ProtectProtectKkwdsLive.fromJson(e)).toList() as M;
    }
    if (<RoomCopyWritingEntity>[] is M) {
      return data.map<RoomCopyWritingEntity>((Map<String, dynamic> e) =>
          RoomCopyWritingEntity.fromJson(e)).toList() as M;
    }
    if (<RoomCopyWritingContent>[] is M) {
      return data.map<RoomCopyWritingContent>((Map<String, dynamic> e) =>
          RoomCopyWritingContent.fromJson(e)).toList() as M;
    }
    if (<ShakeInfoEntity>[] is M) {
      return data.map<ShakeInfoEntity>((Map<String, dynamic> e) =>
          ShakeInfoEntity.fromJson(e)).toList() as M;
    }
    if (<ShakeInfoShakes>[] is M) {
      return data.map<ShakeInfoShakes>((Map<String, dynamic> e) =>
          ShakeInfoShakes.fromJson(e)).toList() as M;
    }
    if (<SiteWalletConfigEntity>[] is M) {
      return data.map<SiteWalletConfigEntity>((Map<String, dynamic> e) =>
          SiteWalletConfigEntity.fromJson(e)).toList() as M;
    }
    if (<SocketBaseEntity>[] is M) {
      return data.map<SocketBaseEntity>((Map<String, dynamic> e) =>
          SocketBaseEntity.fromJson(e)).toList() as M;
    }
    if (<SpreadPromosDataEntity>[] is M) {
      return data.map<SpreadPromosDataEntity>((Map<String, dynamic> e) =>
          SpreadPromosDataEntity.fromJson(e)).toList() as M;
    }
    if (<SpreadPromosDataList>[] is M) {
      return data.map<SpreadPromosDataList>((Map<String, dynamic> e) =>
          SpreadPromosDataList.fromJson(e)).toList() as M;
    }
    if (<SpreadUserEntity>[] is M) {
      return data.map<SpreadUserEntity>((Map<String, dynamic> e) =>
          SpreadUserEntity.fromJson(e)).toList() as M;
    }
    if (<UsdtChannelEntity>[] is M) {
      return data.map<UsdtChannelEntity>((Map<String, dynamic> e) =>
          UsdtChannelEntity.fromJson(e)).toList() as M;
    }
    if (<UsdtEntity>[] is M) {
      return data.map<UsdtEntity>((Map<String, dynamic> e) =>
          UsdtEntity.fromJson(e)).toList() as M;
    }
    if (<UserDetailEntity>[] is M) {
      return data.map<UserDetailEntity>((Map<String, dynamic> e) =>
          UserDetailEntity.fromJson(e)).toList() as M;
    }
    if (<UserDrawDetailEntity>[] is M) {
      return data.map<UserDrawDetailEntity>((Map<String, dynamic> e) =>
          UserDrawDetailEntity.fromJson(e)).toList() as M;
    }
    if (<UserDrawDetailBanks>[] is M) {
      return data.map<UserDrawDetailBanks>((Map<String, dynamic> e) =>
          UserDrawDetailBanks.fromJson(e)).toList() as M;
    }
    if (<VarCodeEntity>[] is M) {
      return data.map<VarCodeEntity>((Map<String, dynamic> e) =>
          VarCodeEntity.fromJson(e)).toList() as M;
    }
    if (<WalletDrawDetailEntity>[] is M) {
      return data.map<WalletDrawDetailEntity>((Map<String, dynamic> e) =>
          WalletDrawDetailEntity.fromJson(e)).toList() as M;
    }
    if (<WebConfigEntity>[] is M) {
      return data.map<WebConfigEntity>((Map<String, dynamic> e) =>
          WebConfigEntity.fromJson(e)).toList() as M;
    }
    if (<WebConfigDcHelpDomain>[] is M) {
      return data.map<WebConfigDcHelpDomain>((Map<String, dynamic> e) =>
          WebConfigDcHelpDomain.fromJson(e)).toList() as M;
    }
    if (<WebConfigPtgamehost>[] is M) {
      return data.map<WebConfigPtgamehost>((Map<String, dynamic> e) =>
          WebConfigPtgamehost.fromJson(e)).toList() as M;
    }
    if (<WebConfigAppDownload>[] is M) {
      return data.map<WebConfigAppDownload>((Map<String, dynamic> e) =>
          WebConfigAppDownload.fromJson(e)).toList() as M;
    }
    if (<WebConfigAppDownloadIos1>[] is M) {
      return data.map<WebConfigAppDownloadIos1>((Map<String, dynamic> e) =>
          WebConfigAppDownloadIos1.fromJson(e)).toList() as M;
    }
    if (<WebConfigAppDownloadIos1Config>[] is M) {
      return data.map<WebConfigAppDownloadIos1Config>((
          Map<String, dynamic> e) => WebConfigAppDownloadIos1Config.fromJson(e))
          .toList() as M;
    }
    if (<WebConfigLottoLineUrl>[] is M) {
      return data.map<WebConfigLottoLineUrl>((Map<String, dynamic> e) =>
          WebConfigLottoLineUrl.fromJson(e)).toList() as M;
    }
    if (<WebConfigAgDomain>[] is M) {
      return data.map<WebConfigAgDomain>((Map<String, dynamic> e) =>
          WebConfigAgDomain.fromJson(e)).toList() as M;
    }
    if (<WebConfigDomainMGuanfangcai>[] is M) {
      return data.map<WebConfigDomainMGuanfangcai>((Map<String, dynamic> e) =>
          WebConfigDomainMGuanfangcai.fromJson(e)).toList() as M;
    }
    if (<WebConfigRegisterOption>[] is M) {
      return data.map<WebConfigRegisterOption>((Map<String, dynamic> e) =>
          WebConfigRegisterOption.fromJson(e)).toList() as M;
    }
    if (<WithdrawCheckEntity>[] is M) {
      return data.map<WithdrawCheckEntity>((Map<String, dynamic> e) =>
          WithdrawCheckEntity.fromJson(e)).toList() as M;
    }
    if (<CountDownLotteryEntity>[] is M) {
      return data.map<CountDownLotteryEntity>((Map<String, dynamic> e) =>
          CountDownLotteryEntity.fromJson(e)).toList() as M;
    }
    if (<GameRoomItemEntity>[] is M) {
      return data.map<GameRoomItemEntity>((Map<String, dynamic> e) =>
          GameRoomItemEntity.fromJson(e)).toList() as M;
    }
    if (<OddsContent>[] is M) {
      return data.map<OddsContent>((Map<String, dynamic> e) =>
          OddsContent.fromJson(e)).toList() as M;
    }
    if (<WsMsgGetPicEntity>[] is M) {
      return data.map<WsMsgGetPicEntity>((Map<String, dynamic> e) =>
          WsMsgGetPicEntity.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (IsolateMsgEntity).toString(): IsolateMsgEntity.fromJson,
    (WsBetEntity).toString(): WsBetEntity.fromJson,
    (WsBetContent).toString(): WsBetContent.fromJson,
    (WsLoginEntity).toString(): WsLoginEntity.fromJson,
    (WsLogoutEntity).toString(): WsLogoutEntity.fromJson,
    (WSLotteryEntity).toString(): WSLotteryEntity.fromJson,
    (WSLotteryEntityData).toString(): WSLotteryEntityData.fromJson,
    (WsMessageGetEntity).toString(): WsMessageGetEntity.fromJson,
    (WsMessageSendEntity).toString(): WsMessageSendEntity.fromJson,
    (WsMsgErrorEntity).toString(): WsMsgErrorEntity.fromJson,
    (WsToBetEntity).toString(): WsToBetEntity.fromJson,
    (WsToBetContent).toString(): WsToBetContent.fromJson,
    (ActStatusEntity).toString(): ActStatusEntity.fromJson,
    (ActStatusList).toString(): ActStatusList.fromJson,
    (BackWaterDescEntity).toString(): BackWaterDescEntity.fromJson,
    (BackWaterEntity).toString(): BackWaterEntity.fromJson,
    (BalanceEntity).toString(): BalanceEntity.fromJson,
    (BankEntity).toString(): BankEntity.fromJson,
    (BaseApiOssEntity).toString(): BaseApiOssEntity.fromJson,
    (BetDetailItemChildEntity).toString(): BetDetailItemChildEntity.fromJson,
    (Record).toString(): Record.fromJson,
    (Total).toString(): Total.fromJson,
    (BetDetailItemEntity).toString(): BetDetailItemEntity.fromJson,
    (BetRecordGroupEntity).toString(): BetRecordGroupEntity.fromJson,
    (BetRecordGroupRecord).toString(): BetRecordGroupRecord.fromJson,
    (BetShakeEntity).toString(): BetShakeEntity.fromJson,
    (BonusTotalEntity).toString(): BonusTotalEntity.fromJson,
    (BtcSourceEntity).toString(): BtcSourceEntity.fromJson,
    (ChapterInfoEntity).toString(): ChapterInfoEntity.fromJson,
    (CheckInInfoEntity).toString(): CheckInInfoEntity.fromJson,
    (CheckPointEntity).toString(): CheckPointEntity.fromJson,
    (ChessInfoEntity).toString(): ChessInfoEntity.fromJson,
    (ConstituteRatioEntity).toString(): ConstituteRatioEntity.fromJson,
    (CurrentBetEntity).toString(): CurrentBetEntity.fromJson,
    (CurrentBetContent).toString(): CurrentBetContent.fromJson,
    (CustomerServiceEntity).toString(): CustomerServiceEntity.fromJson,
    (CustomerServiceCusterServers).toString(): CustomerServiceCusterServers
        .fromJson,
    (DayReturnWaterDetailsEntity).toString(): DayReturnWaterDetailsEntity
        .fromJson,
    (DayReturnWaterDetailsRecord).toString(): DayReturnWaterDetailsRecord
        .fromJson,
    (DepositLogEntity).toString(): DepositLogEntity.fromJson,
    (DeviceInfo).toString(): DeviceInfo.fromJson,
    (DewInfoEntity).toString(): DewInfoEntity.fromJson,
    (DigiccyChannelEntity).toString(): DigiccyChannelEntity.fromJson,
    (DigiccyChannelWallet).toString(): DigiccyChannelWallet.fromJson,
    (DigiccyDepositDataEntity).toString(): DigiccyDepositDataEntity.fromJson,
    (DomainConfigEntity).toString(): DomainConfigEntity.fromJson,
    (DrawLotteryEntity).toString(): DrawLotteryEntity.fromJson,
    (DsGameEntity).toString(): DsGameEntity.fromJson,
    (DsGameGamesZm).toString(): DsGameGamesZm.fromJson,
    (EleGameTypeEntity).toString(): EleGameTypeEntity.fromJson,
    (ExpressionEntity).toString(): ExpressionEntity.fromJson,
    (FlowDataEntity).toString(): FlowDataEntity.fromJson,
    (FlowDataList).toString(): FlowDataList.fromJson,
    (FlowDataPagation).toString(): FlowDataPagation.fromJson,
    (GameKindEntity).toString(): GameKindEntity.fromJson,
    (GameKindGameKindList).toString(): GameKindGameKindList.fromJson,
    (GameTypeEntity).toString(): GameTypeEntity.fromJson,
    (HelpEntity).toString(): HelpEntity.fromJson,
    (HistoryHall).toString(): HistoryHall.fromJson,
    (HistoryLottoEntity).toString(): HistoryLottoEntity.fromJson,
    (HomeGameMenuEntity).toString(): HomeGameMenuEntity.fromJson,
    (IsPermitEntity).toString(): IsPermitEntity.fromJson,
    (JumpPaymentEntity).toString(): JumpPaymentEntity.fromJson,
    (JumpPaymentBanks).toString(): JumpPaymentBanks.fromJson,
    (LanguageMsgEntity).toString(): LanguageMsgEntity.fromJson,
    (LoginGameAgentEntity).toString(): LoginGameAgentEntity.fromJson,
    (LoginGameAgentParams).toString(): LoginGameAgentParams.fromJson,
    (LoginUserEntity).toString(): LoginUserEntity.fromJson,
    (MemberPointEntity).toString(): MemberPointEntity.fromJson,
    (MessageItemEntity).toString(): MessageItemEntity.fromJson,
    (NewsRateEntity).toString(): NewsRateEntity.fromJson,
    (NoticeEntity).toString(): NoticeEntity.fromJson,
    (PaymentChannelEntity).toString(): PaymentChannelEntity.fromJson,
    (PaymentChannelBankSet).toString(): PaymentChannelBankSet.fromJson,
    (PaymentListEntity).toString(): PaymentListEntity.fromJson,
    (PaymentListBanks).toString(): PaymentListBanks.fromJson,
    (Pc28LottoEntity).toString(): Pc28LottoEntity.fromJson,
    (Pc28LottoRooms).toString(): Pc28LottoRooms.fromJson,
    (Pc28LottoRoomsTables).toString(): Pc28LottoRoomsTables.fromJson,
    (Pc28Odds11).toString(): Pc28Odds11.fromJson,
    (Pc28OddsOdd).toString(): Pc28OddsOdd.fromJson,
    (Pc28Odds12).toString(): Pc28Odds12.fromJson,
    (Pc28Odds13).toString(): Pc28Odds13.fromJson,
    (Pc28Odds14).toString(): Pc28Odds14.fromJson,
    (Pc28Odds15).toString(): Pc28Odds15.fromJson,
    (Pc28Odds2).toString(): Pc28Odds2.fromJson,
    (Pc28Odds4).toString(): Pc28Odds4.fromJson,
    (Pc28Odds5).toString(): Pc28Odds5.fromJson,
    (Pc28Odds6).toString(): Pc28Odds6.fromJson,
    (Pc28Odds7).toString(): Pc28Odds7.fromJson,
    (Pc28Odds8).toString(): Pc28Odds8.fromJson,
    (Pc28Odds9).toString(): Pc28Odds9.fromJson,
    (Pc28Odds10).toString(): Pc28Odds10.fromJson,
    (Pc28PlanEntity).toString(): Pc28PlanEntity.fromJson,
    (Pc28PlanAll).toString(): Pc28PlanAll.fromJson,
    (Pc28PlanAllJndx28).toString(): Pc28PlanAllJndx28.fromJson,
    (Pc28PlanAllJndx28Data).toString(): Pc28PlanAllJndx28Data.fromJson,
    (PhraseEntity).toString(): PhraseEntity.fromJson,
    (TimeDataContent).toString(): TimeDataContent.fromJson,
    (TimeDataItem).toString(): TimeDataItem.fromJson,
    (TimeDataItemData).toString(): TimeDataItemData.fromJson,
    (Pic30BackEntity).toString(): Pic30BackEntity.fromJson,
    (Pic30BackBack).toString(): Pic30BackBack.fromJson,
    (Pic30Entity).toString(): Pic30Entity.fromJson,
    (PlatformEntity).toString(): PlatformEntity.fromJson,
    (PointRecordEntity).toString(): PointRecordEntity.fromJson,
    (PointRecordRecord).toString(): PointRecordRecord.fromJson,
    (PrizeListEntity).toString(): PrizeListEntity.fromJson,
    (PrizeListPrizes).toString(): PrizeListPrizes.fromJson,
    (PromotionDetailEntity).toString(): PromotionDetailEntity.fromJson,
    (PromotionTypeKey).toString(): PromotionTypeKey.fromJson,
    (ProtectEntity).toString(): ProtectEntity.fromJson,
    (ProtectProtectKkwdsLive).toString(): ProtectProtectKkwdsLive.fromJson,
    (RoomCopyWritingEntity).toString(): RoomCopyWritingEntity.fromJson,
    (RoomCopyWritingContent).toString(): RoomCopyWritingContent.fromJson,
    (ShakeInfoEntity).toString(): ShakeInfoEntity.fromJson,
    (ShakeInfoShakes).toString(): ShakeInfoShakes.fromJson,
    (SiteWalletConfigEntity).toString(): SiteWalletConfigEntity.fromJson,
    (SocketBaseEntity).toString(): SocketBaseEntity.fromJson,
    (SpreadPromosDataEntity).toString(): SpreadPromosDataEntity.fromJson,
    (SpreadPromosDataList).toString(): SpreadPromosDataList.fromJson,
    (SpreadUserEntity).toString(): SpreadUserEntity.fromJson,
    (UsdtChannelEntity).toString(): UsdtChannelEntity.fromJson,
    (UsdtEntity).toString(): UsdtEntity.fromJson,
    (UserDetailEntity).toString(): UserDetailEntity.fromJson,
    (UserDrawDetailEntity).toString(): UserDrawDetailEntity.fromJson,
    (UserDrawDetailBanks).toString(): UserDrawDetailBanks.fromJson,
    (VarCodeEntity).toString(): VarCodeEntity.fromJson,
    (WalletDrawDetailEntity).toString(): WalletDrawDetailEntity.fromJson,
    (WebConfigEntity).toString(): WebConfigEntity.fromJson,
    (WebConfigDcHelpDomain).toString(): WebConfigDcHelpDomain.fromJson,
    (WebConfigPtgamehost).toString(): WebConfigPtgamehost.fromJson,
    (WebConfigAppDownload).toString(): WebConfigAppDownload.fromJson,
    (WebConfigAppDownloadIos1).toString(): WebConfigAppDownloadIos1.fromJson,
    (WebConfigAppDownloadIos1Config).toString(): WebConfigAppDownloadIos1Config
        .fromJson,
    (WebConfigLottoLineUrl).toString(): WebConfigLottoLineUrl.fromJson,
    (WebConfigAgDomain).toString(): WebConfigAgDomain.fromJson,
    (WebConfigDomainMGuanfangcai).toString(): WebConfigDomainMGuanfangcai
        .fromJson,
    (WebConfigRegisterOption).toString(): WebConfigRegisterOption.fromJson,
    (WithdrawCheckEntity).toString(): WithdrawCheckEntity.fromJson,
    (CountDownLotteryEntity).toString(): CountDownLotteryEntity.fromJson,
    (GameRoomItemEntity).toString(): GameRoomItemEntity.fromJson,
    (OddsContent).toString(): OddsContent.fromJson,
    (WsMsgGetPicEntity).toString(): WsMsgGetPicEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}